FEATURES {
    STARTADDRESS: default = $1000;
}

SYMBOLS {
    __ORIXHDR__:   type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2K stack
    __GRAB__:      type = weak, value = 0;     # 0=don't grab graphics RAM, 1=grab graphics RAM
    __RAMEND__:    type = weak, value = $9800 + $1C00 * __GRAB__;

    __OVERLAY_SIZE__: type = weak, value = $1000; # 4k overlay
    __OVERLAY_START__: type = export, value = __RAMEND__- __OVERLAY_SIZE__;
}

MEMORY {
    ZP:      file = "", define = yes, start = $008C,            size = $0010;
    ORIXHDR: file = %O, type   = ro,  start = $0000,            size = $001F;
#    MAIN:    file = %O, define = yes, start = $0800,            size = __RAMEND__ - __OVERLAY_SIZE__ - __MAIN_START__;
#    BSS:     file = "",               start = __ONCE_RUN__,     size = __RAMEND__ - __STACKSIZE__ - __ONCE_RUN__;
    MAIN:    file = %O, define = yes, start = %S   ,            size = __OVERLAY_START__ - %S;
    BSS:     file = "",               start = __ONCE_RUN__,     size = __OVERLAY_START__ - __STACKSIZE__ - __ONCE_RUN__;

    OVL1:    file = "%O.1",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;
    OVL2:    file = "%O.2",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;
    OVL3:    file = "%O.3",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;
    OVL4:    file = "%O.4",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;
    OVL5:    file = "%O.5",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;
    OVL6:    file = "%O.6",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;
    OVL7:    file = "%O.7",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;
    OVL8:    file = "%O.8",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;
    OVL9:    file = "%O.9",           start = __OVERLAY_START__, size = __OVERLAY_SIZE__;

}

SEGMENTS {
    ZEROPAGE: load = ZP,      type = zp;
    ORIXHDR:  load = ORIXHDR, type = ro;
    STARTUP:  load = MAIN,    type = ro;
    LOWCODE:  load = MAIN,    type = ro,  optional = yes;
    CODE:     load = MAIN,    type = ro;
    RODATA:   load = MAIN,    type = ro;
    DATA:     load = MAIN,    type = rw;
    INIT:     load = MAIN,    type = rw;
    ONCE:     load = MAIN,    type = ro,  define   = yes;
    BASTAIL:  load = MAIN,    type = ro,  optional = yes;
    BSS:      load = BSS,     type = bss, define   = yes;

    OVL1_HDR: load = OVL1,    type = ro,  define = yes, optional = yes;
    OVERLAY1: load = OVL1,    type = ro,  define = yes, optional = yes;

    OVL2_HDR: load = OVL2,    type = ro,  define = yes, optional = yes;
    OVERLAY2: load = OVL2,    type = ro,  define = yes, optional = yes;

    OVL3_HDR: load = OVL3,    type = ro,  define = yes, optional = yes;
    OVERLAY3: load = OVL3,    type = ro,  define = yes, optional = yes;

    OVL4_HDR: load = OVL4,    type = ro,  define = yes, optional = yes;
    OVERLAY4: load = OVL4,    type = ro,  define = yes, optional = yes;

    OVL5_HDR: load = OVL5,    type = ro,  define = yes, optional = yes;
    OVERLAY5: load = OVL5,    type = ro,  define = yes, optional = yes;

    OVL6_HDR: load = OVL6,    type = ro,  define = yes, optional = yes;
    OVERLAY6: load = OVL6,    type = ro,  define = yes, optional = yes;

    OVL7_HDR: load = OVL7,    type = ro,  define = yes, optional = yes;
    OVERLAY7: load = OVL7,    type = ro,  define = yes, optional = yes;

    OVL8_HDR: load = OVL8,    type = ro,  define = yes, optional = yes;
    OVERLAY8: load = OVL8,    type = ro,  define = yes, optional = yes;

    OVL9_HDR: load = OVL9,    type = ro,  define = yes, optional = yes;
    OVERLAY9: load = OVL9,    type = ro,  define = yes, optional = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
